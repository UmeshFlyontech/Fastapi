[
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Blog",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create",
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "isExtraImport": true,
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "destroy",
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "isExtraImport": true,
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "isExtraImport": true,
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "create",
        "importPath": "blog.repository.user",
        "description": "blog.repository.user",
        "isExtraImport": true,
        "detail": "blog.repository.user",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "blog.repository.user",
        "description": "blog.repository.user",
        "isExtraImport": true,
        "detail": "blog.repository.user",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "get_all",
        "kind": 2,
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "peekOfCode": "def get_all(db:Session):\n    blogs = db.query(models.Blog).all()\n    return blogs\ndef create(request: schemas.Blog, db: Session):\n    new_blog = models.Blog(title=request.title, body=request.body, user_id=1)\n    db.add(new_blog)\n    db.commit()\n    db.refresh(new_blog)\n    return new_blog\ndef destroy(id: int, db: Session):",
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "peekOfCode": "def create(request: schemas.Blog, db: Session):\n    new_blog = models.Blog(title=request.title, body=request.body, user_id=1)\n    db.add(new_blog)\n    db.commit()\n    db.refresh(new_blog)\n    return new_blog\ndef destroy(id: int, db: Session):\n    blog = db.query(models.Blog).filter(models.Blog.id == id)\n    if not blog.first():\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Blog with id {id} is not available\")",
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "destroy",
        "kind": 2,
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "peekOfCode": "def destroy(id: int, db: Session):\n    blog = db.query(models.Blog).filter(models.Blog.id == id)\n    if not blog.first():\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Blog with id {id} is not available\")\n    blog.delete(synchronize_session=False)\n    db.commit()\n    return \"Blog has been deleted successfully!\"\ndef update(id: int, db: Session, request: schemas.Blog):\n    blog = db.query(models.Blog).filter(models.Blog.id == id)\n    if not blog.first():",
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "peekOfCode": "def update(id: int, db: Session, request: schemas.Blog):\n    blog = db.query(models.Blog).filter(models.Blog.id == id)\n    if not blog.first():\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Blog with id {id} is not available\")\n    blog.update({\"title\":request.title, \"body\":request.body})\n    db.commit()\n    return \"Record updated successfully!\"\ndef show(id: int, db: Session):\n    blog = db.query(models.Blog).filter(models.Blog.id == id).first()\n    if not blog:",
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "blog.repository.blog",
        "description": "blog.repository.blog",
        "peekOfCode": "def show(id: int, db: Session):\n    blog = db.query(models.Blog).filter(models.Blog.id == id).first()\n    if not blog:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Blog with id {id} is not available\")\n    return blog",
        "detail": "blog.repository.blog",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "blog.repository.user",
        "description": "blog.repository.user",
        "peekOfCode": "def create(db:Session, request: schemas.User):\n    # hashed_password = pwd_context.hash(request.password) this can be used instead creating class for hashed password\n    new_user = models.User(name=request.name, email=request.email, password=Hash.bcrypt(request.password))\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\ndef show(id: int, db: Session):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:",
        "detail": "blog.repository.user",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "blog.repository.user",
        "description": "blog.repository.user",
        "peekOfCode": "def show(id: int, db: Session):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"User with id {id} is not available\")\n    return user\ndef get_all(db: Session):\n    user = db.query(models.User).all()\n    return user",
        "detail": "blog.repository.user",
        "documentation": {}
    },
    {
        "label": "get_all",
        "kind": 2,
        "importPath": "blog.repository.user",
        "description": "blog.repository.user",
        "peekOfCode": "def get_all(db: Session):\n    user = db.query(models.User).all()\n    return user",
        "detail": "blog.repository.user",
        "documentation": {}
    },
    {
        "label": "all",
        "kind": 2,
        "importPath": "blog.routers.blog",
        "description": "blog.routers.blog",
        "peekOfCode": "def all(db: Session = Depends(get_db)):\n    return blog.get_all(db)\n@router.post(\"/\", status_code = status.HTTP_201_CREATED)\ndef create(request: schemas.Blog, db: Session = Depends(get_db)):\n    return blog.create(request, db)\n@router.delete(\"/{id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef destroy(id, db: Session = Depends(get_db)):\n    return blog.destroy(id, db)\n@router.put(\"/{id}\", status_code=status.HTTP_202_ACCEPTED)\ndef update(id, request: schemas.Blog, db: Session = Depends(get_db)):",
        "detail": "blog.routers.blog",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "blog.routers.blog",
        "description": "blog.routers.blog",
        "peekOfCode": "def create(request: schemas.Blog, db: Session = Depends(get_db)):\n    return blog.create(request, db)\n@router.delete(\"/{id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef destroy(id, db: Session = Depends(get_db)):\n    return blog.destroy(id, db)\n@router.put(\"/{id}\", status_code=status.HTTP_202_ACCEPTED)\ndef update(id, request: schemas.Blog, db: Session = Depends(get_db)):\n    return blog.update(id, db, request)\n@router.get(\"/{id}\", status_code=200, response_model= schemas.ShowBlog)\ndef show(id, db: Session = Depends(get_db)):",
        "detail": "blog.routers.blog",
        "documentation": {}
    },
    {
        "label": "destroy",
        "kind": 2,
        "importPath": "blog.routers.blog",
        "description": "blog.routers.blog",
        "peekOfCode": "def destroy(id, db: Session = Depends(get_db)):\n    return blog.destroy(id, db)\n@router.put(\"/{id}\", status_code=status.HTTP_202_ACCEPTED)\ndef update(id, request: schemas.Blog, db: Session = Depends(get_db)):\n    return blog.update(id, db, request)\n@router.get(\"/{id}\", status_code=200, response_model= schemas.ShowBlog)\ndef show(id, db: Session = Depends(get_db)):\n    return blog.show(id, db)",
        "detail": "blog.routers.blog",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "blog.routers.blog",
        "description": "blog.routers.blog",
        "peekOfCode": "def update(id, request: schemas.Blog, db: Session = Depends(get_db)):\n    return blog.update(id, db, request)\n@router.get(\"/{id}\", status_code=200, response_model= schemas.ShowBlog)\ndef show(id, db: Session = Depends(get_db)):\n    return blog.show(id, db)",
        "detail": "blog.routers.blog",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "blog.routers.blog",
        "description": "blog.routers.blog",
        "peekOfCode": "def show(id, db: Session = Depends(get_db)):\n    return blog.show(id, db)",
        "detail": "blog.routers.blog",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "blog.routers.blog",
        "description": "blog.routers.blog",
        "peekOfCode": "router = APIRouter(\n    prefix = \"/blog\",\n    tags=[\"Blogs\"]\n)\nget_db = database.get_db\n@router.get(\"/\", response_model= List[schemas.ShowBlog])\ndef all(db: Session = Depends(get_db)):\n    return blog.get_all(db)\n@router.post(\"/\", status_code = status.HTTP_201_CREATED)\ndef create(request: schemas.Blog, db: Session = Depends(get_db)):",
        "detail": "blog.routers.blog",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 5,
        "importPath": "blog.routers.blog",
        "description": "blog.routers.blog",
        "peekOfCode": "get_db = database.get_db\n@router.get(\"/\", response_model= List[schemas.ShowBlog])\ndef all(db: Session = Depends(get_db)):\n    return blog.get_all(db)\n@router.post(\"/\", status_code = status.HTTP_201_CREATED)\ndef create(request: schemas.Blog, db: Session = Depends(get_db)):\n    return blog.create(request, db)\n@router.delete(\"/{id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef destroy(id, db: Session = Depends(get_db)):\n    return blog.destroy(id, db)",
        "detail": "blog.routers.blog",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "blog.routers.user",
        "description": "blog.routers.user",
        "peekOfCode": "def create_user(request: schemas.User, db: Session = Depends(get_db)):\n    return user.create(db, request)\n@router.get(\"/{id}\", status_code=200, response_model= schemas.ShowUser)\ndef show(id: int, db: Session = Depends(get_db)):\n    return user.show(id, db)\n@router.get(\"/\", response_model= List[schemas.ShowUser])\ndef all(db: Session = Depends(get_db)):\n    return user.get_all(db)",
        "detail": "blog.routers.user",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "blog.routers.user",
        "description": "blog.routers.user",
        "peekOfCode": "def show(id: int, db: Session = Depends(get_db)):\n    return user.show(id, db)\n@router.get(\"/\", response_model= List[schemas.ShowUser])\ndef all(db: Session = Depends(get_db)):\n    return user.get_all(db)",
        "detail": "blog.routers.user",
        "documentation": {}
    },
    {
        "label": "all",
        "kind": 2,
        "importPath": "blog.routers.user",
        "description": "blog.routers.user",
        "peekOfCode": "def all(db: Session = Depends(get_db)):\n    return user.get_all(db)",
        "detail": "blog.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "blog.routers.user",
        "description": "blog.routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix = \"/user\",\n    tags=[\"Users\"]\n)\nget_db = database.get_db\n@router.post(\"/\", response_model= schemas.ShowUser)\ndef create_user(request: schemas.User, db: Session = Depends(get_db)):\n    return user.create(db, request)\n@router.get(\"/{id}\", status_code=200, response_model= schemas.ShowUser)\ndef show(id: int, db: Session = Depends(get_db)):",
        "detail": "blog.routers.user",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 5,
        "importPath": "blog.routers.user",
        "description": "blog.routers.user",
        "peekOfCode": "get_db = database.get_db\n@router.post(\"/\", response_model= schemas.ShowUser)\ndef create_user(request: schemas.User, db: Session = Depends(get_db)):\n    return user.create(db, request)\n@router.get(\"/{id}\", status_code=200, response_model= schemas.ShowUser)\ndef show(id: int, db: Session = Depends(get_db)):\n    return user.show(id, db)\n@router.get(\"/\", response_model= List[schemas.ShowUser])\ndef all(db: Session = Depends(get_db)):\n    return user.get_all(db)",
        "detail": "blog.routers.user",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "blog.database",
        "description": "blog.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "blog.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "blog.database",
        "description": "blog.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///./blog.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "blog.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "blog.database",
        "description": "blog.database",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "blog.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "blog.database",
        "description": "blog.database",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "blog.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "blog.database",
        "description": "blog.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "blog.database",
        "documentation": {}
    },
    {
        "label": "Hash",
        "kind": 6,
        "importPath": "blog.hashing",
        "description": "blog.hashing",
        "peekOfCode": "class Hash():\n    def bcrypt(password: str):\n        return pwd_context.hash(password)",
        "detail": "blog.hashing",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "blog.hashing",
        "description": "blog.hashing",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass Hash():\n    def bcrypt(password: str):\n        return pwd_context.hash(password)",
        "detail": "blog.hashing",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "blog.main",
        "description": "blog.main",
        "peekOfCode": "app = FastAPI()\nmodels.Base.metadata.create_all(engine)\napp.include_router(blog.router)\napp.include_router(user.router)",
        "detail": "blog.main",
        "documentation": {}
    },
    {
        "label": "Blog",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Blog(Base):\n    __tablename__ = \"blogs\"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    body = Column(String)\n    user_id = Column(Integer, ForeignKey('users.id'))\n    creator = relationship(\"User\", back_populates='blogs')\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String)\n    email = Column(String)\n    password = Column(String)\n    blogs = relationship(\"Blog\", back_populates='creator')",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "BlogBase",
        "kind": 6,
        "importPath": "blog.schemas",
        "description": "blog.schemas",
        "peekOfCode": "class BlogBase(BaseModel):\n    title: str\n    body: str\nclass Blog(BlogBase):\n    class Config():\n        orm_mode = True\nclass User(BaseModel):\n    name: str\n    email: str\n    password: str",
        "detail": "blog.schemas",
        "documentation": {}
    },
    {
        "label": "Blog",
        "kind": 6,
        "importPath": "blog.schemas",
        "description": "blog.schemas",
        "peekOfCode": "class Blog(BlogBase):\n    class Config():\n        orm_mode = True\nclass User(BaseModel):\n    name: str\n    email: str\n    password: str\nclass ShowUser(BaseModel):\n    name: str\n    email: str",
        "detail": "blog.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "blog.schemas",
        "description": "blog.schemas",
        "peekOfCode": "class User(BaseModel):\n    name: str\n    email: str\n    password: str\nclass ShowUser(BaseModel):\n    name: str\n    email: str\n    blogs: List[Blog] = []\n    class Config():\n        orm_mode = True",
        "detail": "blog.schemas",
        "documentation": {}
    },
    {
        "label": "ShowUser",
        "kind": 6,
        "importPath": "blog.schemas",
        "description": "blog.schemas",
        "peekOfCode": "class ShowUser(BaseModel):\n    name: str\n    email: str\n    blogs: List[Blog] = []\n    class Config():\n        orm_mode = True\n# we can mention the fields which we want to show in the class model.(either title, body or both)\nclass ShowBlog(BaseModel): # to view fields in api, it is needed to call BaseModel or Blog class instead of Blog\n    title: str\n    body: str",
        "detail": "blog.schemas",
        "documentation": {}
    },
    {
        "label": "ShowBlog",
        "kind": 6,
        "importPath": "blog.schemas",
        "description": "blog.schemas",
        "peekOfCode": "class ShowBlog(BaseModel): # to view fields in api, it is needed to call BaseModel or Blog class instead of Blog\n    title: str\n    body: str\n    creator: ShowUser\n    class Config():\n        orm_mode = True",
        "detail": "blog.schemas",
        "documentation": {}
    },
    {
        "label": "Blog",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Blog(BaseModel):\n    title: str\n    body: str\n    published: Optional[bool]\n@app.post(\"/blog\")\ndef create_blog(blog: Blog):\n    return {\"Data\": f\"Blog is created with title as {blog.title}\"}\n# if __name__ == \"__main__\":\n#     uvicorn.run(app, host=\"127.0.0.1\", port=9000)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def index(limit: int=20, published: bool=True, sort: Optional[str]= None):\n    if published:\n        return {'Data': f'{limit} published blogs from the DB'}\n    else:\n        return {'Data': f'{limit} blogs from the DB'}\n@app.get(\"/blog/unpublished\")\ndef  unpublished():\n    return {\"Data\": \"All unpublished blogs\"}\n@app.get(\"/blog/{id}\")\ndef blog(id: int):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  unpublished():\n    return {\"Data\": \"All unpublished blogs\"}\n@app.get(\"/blog/{id}\")\ndef blog(id: int):\n    return {\"Data\":id}\n@app.get(\"/blog/{id}/comment\")\ndef comment(id, limit=10):\n    return limit\n    return {\"Data\":{'1', '2'}}\nclass Blog(BaseModel):"
        },
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def  unpublished():\n    return {\"Data\": \"All unpublished blogs\"}\n@app.get(\"/blog/{id}\")\ndef blog(id: int):\n    return {\"Data\":id}\n@app.get(\"/blog/{id}/comment\")\ndef comment(id, limit=10):\n    return limit\n    return {\"Data\":{'1', '2'}}\nclass Blog(BaseModel):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "blog",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def blog(id: int):\n    return {\"Data\":id}\n@app.get(\"/blog/{id}/comment\")\ndef comment(id, limit=10):\n    return limit\n    return {\"Data\":{'1', '2'}}\nclass Blog(BaseModel):\n    title: str\n    body: str\n    published: Optional[bool]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "comment",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def comment(id, limit=10):\n    return limit\n    return {\"Data\":{'1', '2'}}\nclass Blog(BaseModel):\n    title: str\n    body: str\n    published: Optional[bool]\n@app.post(\"/blog\")\ndef create_blog(blog: Blog):\n    return {\"Data\": f\"Blog is created with title as {blog.title}\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "create_blog",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def create_blog(blog: Blog):\n    return {\"Data\": f\"Blog is created with title as {blog.title}\"}\n# if __name__ == \"__main__\":\n#     uvicorn.run(app, host=\"127.0.0.1\", port=9000)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/blog\")\ndef index(limit: int=20, published: bool=True, sort: Optional[str]= None):\n    if published:\n        return {'Data': f'{limit} published blogs from the DB'}\n    else:\n        return {'Data': f'{limit} blogs from the DB'}\n@app.get(\"/blog/unpublished\")\ndef  unpublished():\n    return {\"Data\": \"All unpublished blogs\"}",
        "detail": "main",
        "documentation": {}
    }
]